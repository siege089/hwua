type Player {
    player_id: ID!
    username: String!
    created_at: String!
}

input RegisterPlayerInput {
    username: String!
    password: String!
    confirm_password: String!
}

type PlayerLogin {
    status: Boolean!
    player: Player
    token: String
}

input PlayerSigninInput {
    username: String!
    password: String!
}

type Game {
    game_id: ID!
    creator: Player!
    players: [Player]!
    winner: Player
    complete: Boolean!
    moves: [Move]!
    created_at: String!
}

type GameInfo {
    game_id: ID!
    creator: Player!
    created_at: String!
}

type Move {
    move_id: ID!
    position_x: Int!
    position_y: Int!
    player: Player!
    created_at: String
}

type CreateGame {
    game: Game
    token: String
}

type JoinGame {
    game: Game
    token: String
}

input JoinGameInput {
    game_id: ID!
}

input MoveInput {
    position_x: Int!
    position_y: Int!
}

type Query {
    loginUser(player: PlayerSigninInput): PlayerLogin
    openGames: [GameInfo]
}

type Mutation {
    registerPlayer(new_player: RegisterPlayerInput): Player
    registerGame: CreateGame
    joinGame(game: JoinGameInput): JoinGame
    saveMove(move: MoveInput): Move
}